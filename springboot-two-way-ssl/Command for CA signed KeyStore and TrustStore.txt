For Certificate Authority
# 1. Creating a Certificate Authority
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -genkeypair -keyalg RSA -keysize 2048 -alias root-ca -dname "CN=Root-CA,OU=Certificate Authority,O=Thunderberry,C=NL" -validity 3650 -ext bc:c -keystore root-ca/root_ca_identity.jks -storepass secret -keypass secret -deststoretype pkcs12

# 2. Signing the certificate with the Certificate Signing Request - Convert java keystore to a p12 file
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -importkeystore -srckeystore root-ca/root_ca_identity.jks -destkeystore root-ca/root-ca.p12 -srcstoretype jks -deststoretype pkcs12 -srcstorepass secret -deststorepass secret

# 3. Signing the certificate with the Certificate Signing Request - Create pem file from a p12 file
openssl pkcs12 -in root-ca/root-ca.p12 -out root-ca/root-ca.pem -nokeys -passin pass:secret -passout pass:secret

# 4. Signing the certificate with the Certificate Signing Request - Create a key file from a p12 file
openssl pkcs12 -in root-ca/root-ca.p12 -out root-ca/root-ca.key -nocerts -passin pass:secret -passout pass:secret

# 5. Delete root-ca/root_ca_identity.jks and root-ca/root-ca.p12
rm -rf root-ca/root_ca_identity.jks root-ca/root-ca.p12


For Server
# 6. Create a keystore with a public and private key
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -genkeypair -keyalg RSA -keysize 2048 -alias server -dname "CN=Self Signed Certificate,OU=ServerDevelopment,O=ServerDevelopment,C=SG" -ext "SAN:c=DNS:localhost,IP:127.0.0.1" -validity 3650 -keystore server/keystore_server_tmp.jks -storepass s3cr3ts3rv3r -keypass s3cr3ts3rv3r -deststoretype pkcs12

# 7. Create a Certificate Signing Request
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -certreq -keystore server/keystore_server_tmp.jks -alias server -keypass s3cr3ts3rv3r -storepass s3cr3ts3rv3r -keyalg rsa -file server/server.csr

# 8. Sign the server certificate with Certificate Authority pem file and private key
openssl x509 -req -in server/server.csr -CA root-ca/root-ca.pem -CAkey root-ca/root-ca.key -CAcreateserial -out server/server-signed.cer -sha256 -days 1825 -passin pass:secret

# 9. Delete server/server.csr
rm -rf server/server.csr


# 10. Create P12 file from JKS file, to extract server private key
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -importkeystore -srckeystore server/keystore_server_tmp.jks -destkeystore server/server.p12 -srcstoretype jks -deststoretype pkcs12 -srcstorepass s3cr3ts3rv3r -deststorepass s3cr3ts3rv3r

# 11. Delete server/keystore_server_tmp.jks
rm -rf server/keystore_server_tmp.jks

# 12. Extract server private key from P12 file
openssl pkcs12 -in server/server.p12 -nodes -out server/server-private.key -nocerts -passin pass:s3cr3ts3rv3r

# 13. Export server signed P12 file by importing server signed cer file and server private key
openssl pkcs12 -export -in server/server-signed.cer -inkey server/server-private.key -out server/server-signed.p12 -name server -passout pass:s3cr3ts3rv3r

# 14. Delete server/server.p12 and server/server-signed.cer and server/server-private.key
rm -rf  server/server-signed.cer server/server.p12 server/server-private.key

# 15. Create JKS file for server using server signed P12 file
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -importkeystore -srckeystore server/server-signed.p12 -srcstoretype PKCS12 -destkeystore server/keystore_server.jks -srcstorepass s3cr3ts3rv3r -deststorepass s3cr3ts3rv3r

# 16. Create truststore for the client using Certificate Authority pem file
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -keystore server/truststore_server.jks -importcert -file root-ca/root-ca.pem -alias root-ca -storepass s3cr3ts3rv3r


























For Client
# 2. Create a keystore with a public and private key
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -genkeypair -keyalg RSA -keysize 2048 -alias client -dname "CN=Self Signed Certificate,OU=ClientDevelopment,O=ClientDevelopment,C=SG" -ext "SAN:c=DNS:localhost,IP:127.0.0.1" -validity 3650 -keystore client/keystore_client.jks -storepass s3cr3tcli3nt -keypass s3cr3tcli3nt -deststoretype pkcs12

# 3. Creating a Certificate Signing Request
"C:\Program Files\Java\jdk1.8.0_212\bin\keytool" -certreq -keystore client/keystore_client.jks -alias client -keypass s3cr3tcli3nt -storepass s3cr3tcli3nt -keyalg rsa -file client/client.csr

# 7. Signing the client certificate
openssl x509 -req -in client/client.csr -CA root-ca/root-ca.pem -CAkey root-ca/root-ca.key -CAcreateserial -out client/client-signed.cer -sha256 -days 1825 -passin pass:secret

# 8. Replace unsigned certificate with a signed one
keytool -importkeystore -srckeystore client/src/test/resources/identity.jks -destkeystore client/src/test/resources/client.p12 -srcstoretype jks -deststoretype pkcs12 -srcstorepass secret -deststorepass secret
openssl pkcs12 -in client/src/test/resources/client.p12 -nodes -out client/src/test/resources/client-private.key -nocerts -passin pass:secret
openssl pkcs12 -export -in client/src/test/resources/client-signed.cer -inkey client/src/test/resources/client-private.key -out client/src/test/resources/client-signed.p12 -name client -passout pass:secret
keytool -delete -alias client -keystore client/src/test/resources/identity.jks -storepass secret
keytool -importkeystore -srckeystore client/src/test/resources/client-signed.p12 -srcstoretype PKCS12 -destkeystore client/src/test/resources/identity.jks -srcstorepass secret -deststorepass secret